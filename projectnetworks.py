import textwrap
from tkinter import Tk, Label, Entry, Button
from tkinter import ttk
import tkinter.font as font
from tkinter.ttk import Treeview
import socket
from IPy import IP

# wraps text
def wrap(string, lenght=80):
    return '\n'.join(textwrap.wrap(string, lenght))

class portscan(): 
    banners = []
    open_ports = []
    def __init__(self, targetip, port_num): 
        self.targetip = targetip
        self.port_num = port_num

    #scans open ports on target IP
    def scan(self): 
        for port in range(1, self.port_num):
            self.scan_port(port)
            print(port)

    #converts URL to IP address and converts target IP to IP datatype
    def check_ip(self): 
        try:
            IP(self.targetip) 
            return(self.targetip)
        except ValueError:
            return socket.gethostbyname(self.targetip) 

    #scans specific port for vulnerabilities and adds them to banner if found
    def scan_port(self, port):
        try:
            converted_ip = self.check_ip() 
            sock = socket.socket()
            sock.settimeout(0.5)
            sock.connect((converted_ip, port)) 
            self.open_ports.append(port) 
            try:
                banner = sock.recv(1024).decode().strip('\n').strip('\r') 
                print(banner) 
                self.banners.append(banner) 
            except:
                self.banners.append(' ') 
            sock.close()
        except:
            pass

#takes IP address and num ports as input and returns list of exploits
def perform_scan(ip_address: str, num_ports: int) -> list[tuple[str, str, str]]:
    targets_ip = ip_address
    port_number = num_ports
    vul_file = 'download.txt'

    target = portscan(targets_ip, port_number)
    target.scan()

    data = []
    vulnerabilities = []

    with open(vul_file, 'r') as file:
        next(file) # skip header row
        for line in file:
            fields = line.strip().split(',')
            vulnerability = fields[0]
            exploit = fields[1]
            severity = fields[2]
            description = fields[3]
            vulnerabilities.append((vulnerability, exploit, severity, wrap(description)))

    for i in range(len(target.open_ports)):
        for vuln in vulnerabilities:
            if vuln[0] in target.banners[i]:
                data.append((vuln[1], vuln[2], vuln[3]))

    return data

root = Tk()
root.geometry("580x400")
root.configure(bg='#3e6198')

## output text variable here
output_text = "New output"

root.title("Vulnerability Scanner")

## handle IP input
label_ip = Label(root, text="Enter IP address", bg='#3e6198', fg='white', font=("Arial", 12))
label_ip.grid(row=0, column=0, padx=10, pady=10)

ip_address_input = Entry(root, width=20, font=("Arial", 12))
ip_address_input.grid(row=0, column=1, padx=10, pady=10)

## handle number of ports input
label_num_ports = Label(root, text="Enter number of ports", bg='#3e6198', fg='white', font=("Arial", 12))
label_num_ports.grid(row=1, column=0, padx=10, pady=10)

num_ports_input = Entry(root, width=20, font=("Arial", 12))
num_ports_input.grid(row=1, column=1, padx=10, pady=10)

## output text
label_output = Label(root, text=f"{output_text}", bg='#3e6198', fg='white', font=("Arial", 12))
label_output.grid(row=2, column=0, columnspan=2, padx=10, pady=10)

# Add the rowheight
s=ttk.Style()
s.configure('Treeview', rowheight=50)

## create Treeview widget
table = Treeview(root, columns=("Exploit", "Severity", "Description"), height= 3, show="headings", style="mystyle.Treeview")
table.heading("Exploit", text="Exploit", anchor="center")
table.heading("Severity",text="Severity", anchor="center")
table.heading("Description", text="Description", anchor="center")
# table.column("#0", width=0, stretch="no")
table.column("Exploit", anchor="center", width=150)
table.column("Severity", anchor="center", width=100)
table.column("Description", anchor="center", width=300)
table.grid(row=3, column=0, columnspan=2, padx=10, pady=10)

## scan button

def button_pressed():
    ## clear the current table
    table.delete(*table.get_children())

    ## get IP address and number of ports from user input
    ip_address = ip_address_input.get()
    num_ports_str = num_ports_input.get()

    ## check if num_ports_input field is empty
    if num_ports_str == "":
        output_text = "Please enter a valid number of ports"
        label_output.config(text=output_text)
        return

    num_ports = int(num_ports_str)

    ## perform scan and get vulnerability data
    vulnerability_data = perform_scan(ip_address, num_ports)

    ## add vulnerability data to the table
    row_count = 0
    for data in vulnerability_data:
        table.insert(parent="", index=row_count, iid=row_count, text="", values=data)
        row_count += 1

    ## update output text
    output_text = f"{len(vulnerability_data)} vulnerabilities found for {ip_address} on {num_ports} ports"
    label_output.config(text=output_text)


scan_button = Button(root, text="Scan", command=button_pressed, bg='#3e6198', fg='white', font=font.Font(size=15), padx=10, pady=10)
scan_button.grid(row=4, column=0, columnspan=2, padx=10, pady=10)

## define custom style for Treeview widget
style = {
    "mystyle.Treeview": {
        "configure": {
            "background": "#3e6198",
            "foreground": "white",
            "font": ("Arial", 12)
        },
        "heading": {
            "font": ("Arial", 12, "bold"),
            "background": "white",
            "foreground": "black"
        }
    }
}

## apply custom style
root.style = style

root.mainloop()